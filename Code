// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Tokens is ERC20, Ownable {
    address private _mainOwner;

    constructor(address owner) ERC20("Tokens", "MTK") Ownable(owner) {
        _mainOwner = owner;
        _mint(owner, 700 * (10**uint256(decimals())));
    }

    function setOwner(address newOwner) external {
        require(newOwner != address(0), "Invalid owner address");
        _mainOwner = newOwner;
        transferOwnership(newOwner);
    }

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

        function transfer(address recipient, uint256 amount) public override returns (bool) {
            _transfer(_msgSender(), recipient, amount);
            return true;
        }

    function burn(uint256 amount) public {
        _burn(_msgSender(), amount);
    }
}
